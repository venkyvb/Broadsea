version: '3'

volumes:
  atlasdb-postgres-data:
    name: atlasdb-postgres-data
  rstudio-home-data:
    name: rstudio-home-data
  rstudio-tmp-data:
    name: rstudio-tmp-data

services:

  traefik:
    image: docker.io/library/traefik:v2.9.4@sha256:4c388f477f5b7aa48420694d90db0ecb96b4ecede60b9b7589c87858abf87b60
    container_name: traefik
    restart: unless-stopped
    ipc: none
    read_only: true
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    labels:
      - "traefik.enable=true"
    ports:
      - "${BROADSEA_HOST}:80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  broadsea-content:
    container_name: broadsea-content
    image: nginx
    restart: unless-stopped
    volumes:
      - ./broadsea-content:/usr/share/nginx/html/broadsea:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`${BROADSEA_HOST}`) && PathPrefix(`/broadsea`)"
      - "traefik.http.routers.nginx.entrypoints=web"

  broadsea-hades:
    container_name: broadsea-hades
    image: ohdsi/broadsea-hades:4.2.1
    environment:
      - USER=ohdsi
      - PASSWORD=mypass
    volumes:
      - rstudio-home-data:/home
      - rstudio-tmp-data:/tmp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.broadsea-hades.rule=Host(`${BROADSEA_HOST}`) && PathPrefix(`/`)"
      - "traefik.http.routers.broadsea-hades.entrypoints=web"
      - "traefik.http.services.broadsea-hades.loadbalancer.server.port=8787"
    ports:
      - "8787:8787"
      - "6311:6311"

  ohdsi-atlas:
    container_name: ohdsi-atlas
    image: docker.io/ohdsi/atlas:latest
    restart: unless-stopped
    ipc: none
    privileged: false
    environment:
      WEBAPI_URL: "http://${BROADSEA_HOST}/WebAPI/"
    depends_on:
      - ohdsi-webapi
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ohdsi-atlas.rule=Host(`${BROADSEA_HOST}`) && PathPrefix(`/atlas`)"
      - "traefik.http.routers.ohdsi-atlas.entrypoints=web"

  ohdsi-webapi:
    container_name: ohdsi-webapi
    image: ghcr.io/venkyvb/webapi-spark:latest
    restart: unless-stopped
    ipc: none
    read_only: true
    volumes:
      - .:/tmp/drivers/:ro
    tmpfs:
      - /tmp
    privileged: false
    environment:
      DATASOURCE_DRIVERCLASSNAME: org.postgresql.Driver
      DATASOURCE_URL: jdbc:postgresql://broadsea-atlasdb:5432/postgres
      DATASOURCE_USERNAME: postgres
      DATASOURCE_PASSWORD: mypass
      DATASOURCE_OHDSI_SCHEMA: webapi
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: webapi
      SPRING_BATCH_REPOSITORY_TABLEPREFIX: webapi.BATCH_
      FLYWAY_DATASOURCE_DRIVERCLASSNAME: org.postgresql.Driver
      FLYWAY_DATASOURCE_URL: jdbc:postgresql://broadsea-atlasdb:5432/postgres
      FLYWAY_DATASOURCE_USERNAME: postgres
      FLYWAY_DATASOURCE_PASSWORD: postgres
      FLYWAY_LOCATIONS: classpath:db/migration/postgresql
      FLYWAY_PLACEHOLDERS_OHDSISCHEMA: webapi
      FLYWAY_SCHEMAS: webapi
      FLYWAY_BASELINEONMIGRATE: "true"
      FLYWAY_TABLE: schema_history
      flyway_baselineVersionAsString: "2.2.5.20180212152023"  # this env var is case sensitive
      FLYWAY_BASELINEDESCRIPTION: Base Migration
      SECURITY_CORS_ENABLED: "true"
      SECURITY_ORIGIN: "http://${BROADSEA_HOST}"
    depends_on:
      - broadsea-atlasdb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ohdsi-webapi.rule=Host(`${BROADSEA_HOST}`) && PathPrefix(`/WebAPI`)"
      - "traefik.http.routers.ohdsi-webapi.entrypoints=web"

  broadsea-atlasdb:
    image: ohdsi/broadsea-atlasdb:2.0.0
    container_name: broadsea-atlasdb
    cpus: 2
    mem_limit: "2G"
    environment:
      - POSTGRES_PASSWORD=mypass
    ports:
      - "5432:5432"
    volumes:
     - atlasdb-postgres-data:/var/lib/postgresql/data
     - ./100_populate_source_source_daimon.sql:/docker-entrypoint-initdb.d/100_populate_source_source_daimon.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10